#---
#name: Release
#
#on:
#  workflow_dispatch:
#    inputs:
#      title:
#        description: "Release title"
#        required: false
#
#jobs:
#  release:
#    runs-on: ubuntu-latest
#    environment: deployment
#    name: Build, publish, release, and announce
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          ssh-key: ${{ secrets.DEPLOY_KEY }}
#
#      - name: Setup Java 19
#        uses: actions/setup-java@v4.5.0
#        with:
#          distribution: temurin
#          java-version: 19
#          cache: maven
#          server-id: ossrh
#          server-username: OSSRH_USERNAME
#          server-password: OSSRH_TOKEN
#          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
#          gpg-passphrase: GPG_PASSPHRASE
#
#      - name: Configure git
#        run: |
#          git config user.name "${{ github.actor }}"
#          git config user.email "${{ github.actor }}@users.noreply.github.com"
#
#      - name: Determine next SemVer
#        id: bumper
#        uses: tomerfi/version-bumper-action@2.0.3
#        with:
#          label: -SNAPSHOT
#
#      - name: Initiate an ssh agent
#        uses: webfactory/ssh-agent@v0.9.0
#        with:
#          ssh-private-key: ${{ secrets.DEPLOY_KEY }}
#
#      - name: Deploy to OSSRH
#        env:
#          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
#          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
#        run: >
#          mvn release:prepare release:perform -B -ff
#          -Dtag=${{ steps.bumper.outputs.next }}
#          -DreleaseVersion=${{ steps.bumper.outputs.next }}
#          -DdevelopmentVersion=${{ steps.bumper.outputs.dev}}
#
#      - name: Create a release name
#        id: release_name
#        uses: actions/github-script@v7
#        with:
#          script: |
#            var retval = '${{ steps.bumper.outputs.next }}'
#            if ('${{ github.event.inputs.title }}') {
#              retval = retval.concat(' - ${{ github.event.inputs.title }}')
#            }
#            core.setOutput('value', retval)
#
#      - name: Create a release
#        id: gh_release
#        uses: actions/github-script@v7
#        with:
#          github-token: ${{ secrets.RELEASE_PAT }}
#          script: |
#            const repo_name = context.payload.repository.full_name
#            const response = await github.request('POST /repos/' + repo_name + '/releases', {
#              tag_name: '${{ steps.bumper.outputs.next }}',
#              name: '${{ steps.release_name.outputs.value }}',
#              generate_release_notes: true
#            })
#            core.setOutput('html_url', response.data.html_url)
#
#      - name: Update documentation with new version
#        # yamllint disable rule:line-length
#        # editorconfig-checker-disable
#        run: |
#          sed -i 's/DarchetypeVersion=.*/DarchetypeVersion=${{ steps.bumper.outputs.next }}/g' docs/archetypes/*.md
#          sed -i 's/DarchetypeVersion=.*/DarchetypeVersion=${{ steps.bumper.outputs.next }}/g' ./README.md
#          sed -i 's/  version: .*/  version: "${{ steps.bumper.outputs.new_version }}"/g' mkdocs.yml
#          sed -i 's/const currentVersion = .*/const currentVersion = "${{ steps.bumper.outputs.next }}"/g' docs/generator.js
#        # yamllint enable rule:line-length
#        # editorconfig-checker-enable
#
#      - name: Commit modifications
#        run: |
#          git add docs/archetypes
#          git add ./README.md
#          git add mkdocs.yml
#          git add docs/generator.js
#          git commit -m "docs: updated docs with ${{ steps.bumper.outputs.next }} [skip ci]"
#          git push origin HEAD
